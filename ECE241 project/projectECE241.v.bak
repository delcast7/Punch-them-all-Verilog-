// Part 2

module ece241Project(
		CLOCK_50,						//	On Board 50 MHz
		// Your inputs and outputs here
		SW,
		KEY,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input			CLOCK_50;				//	50 MHz
	// Declare your inputs and outputs here
	input [9:0]SW;
	input [3:0]KEY;
	
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[9:0]	VGA_R;   				//	VGA Red[9:0]
	output	[9:0]	VGA_G;	 				//	VGA Green[9:0]
	output	[9:0]	VGA_B;   				//	VGA Blue[9:0]
	
	
	///////

	wire resetn;
	assign resetn = KEY[0];
	wire up, down, left, right;
	wire [7:0]xreg;
	wire [6:0]yreg;
	
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;


	// Define the number of colours as well as the initial background		
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
	
	move_square_control MS_C0(
		.clk(CLOCK_50),
		.resetn(resetn),
		.xreg(xreg),
		.yreg(yreg),
		
		.up(up),
		.down(down),
		.left(left),
		.right(right)
	 
    );
	
	
	move_square_dpath MS_D0(
		.clk(CLOCK_50),
		.resetn(resetn),
		.colour(SW[9:7]),
		
		.up(up),
		.down(down),
		.left(left),
		.right(right),
		.xreg(xreg),
		.yreg(yreg),
		
		.writeEn(writeEn),
		.x(x),
		.y(y), 
		.colour_out(colour)
		);
		
	
endmodule


//=============================================================================================
module move_square_control(
	input clk,
	input resetn,
	input [7:0]xreg, 
	input [6:0]yreg,
	
	
	output reg up,
	output reg down,
	output reg left, 
	output reg right
	 
    );
	 
	
    reg [1:0] current_state, next_state;

	 localparam  DOWN_RIGHT       = 2'd0,
					 UP_RIGHT		   = 2'd1,
					 UP_LEFT        	= 2'd2,
                DOWN_LEFT	   	= 2'd3;
    
    // Next state logic aka our state table
    always@(*)
    begin: state_table 
            case (current_state)
				
					DOWN_RIGHT:	
						begin
							if (yreg == 7'd116)
								next_state <= UP_RIGHT;
							else if(xreg == 8'd156)
								next_state <= DOWN_LEFT;
							else 
								next_state <= DOWN_RIGHT;
						end
					
					UP_RIGHT:
						begin
							if (yreg == 7'd0)
								next_state <= DOWN_RIGHT;
							else if(xreg == 8'd156)
								next_state <= UP_LEFT;
							else 
								next_state <= UP_RIGHT;
						end
						
					UP_LEFT:
					begin
							if (yreg == 7'd0)
								next_state <= DOWN_LEFT;
							else if(xreg == 8'd0)
								next_state <= UP_RIGHT;
							else 
								next_state <= UP_LEFT;
					end
					
					DOWN_LEFT:
					begin
							if (yreg == 7'd116)
								next_state <= UP_LEFT;
							else if(xreg == 8'd0)
								next_state <= DOWN_RIGHT;
							else 
								next_state <= DOWN_LEFT;
					end
			
					 
            default:    next_state = DOWN_RIGHT;
        endcase
    end // state_table
   

    // Output logic aka all of our datapath control signals
	always @(*)
	begin: enable_signals
		// By default make all our signals 0
		left = 1'b0; 
		right = 1'b0;
		up = 1'b0;
		down = 1'b0;
		
		case (current_state)
				DOWN_RIGHT:
				begin
					right = 1'b1;
					down = 1'b1;
				end
				
				UP_RIGHT:
				begin
					right = 1'b1;
					up = 1'b1;
				end
				
				UP_LEFT:
				begin
					left = 1'b1;
					up = 1'b1;
				end
				
				DOWN_LEFT:
				begin
					left = 1'b1;
					down = 1'b1;					
				end
				
				
				
        // default:    // don't need default since we already made sure all of our outputs were assigned a value at the start of the always block
        endcase
    end // enable_signals
	 
	 // current_state registers
    always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= DOWN_RIGHT;
        else
            current_state <= next_state;
    end // state_FFS
endmodule


//=============================================================================================
module move_square_dpath (clk, resetn, colour, up, down, left, right, writeEn, xreg, yreg, x, y, colour_out);
	
	input clk, resetn;
	input [2:0]colour;
	input up, down, left, right;
	
	output writeEn;
	output [7:0]x;
	output [6:0]y;
	output [2:0]colour_out;
	
	output reg [7:0]xreg;
	output reg [6:0]yreg;
	
	wire RateDivider;
	reg [23:0]count1;
	
	wire black_screen;
	reg [23:0]count2;
		
	assign RateDivider = 	(count1 == 24'd5000000)? 1 : 0;
	assign black_screen = 	(count2 == 24'd4800000)? 1 : 0;
	
	always @(posedge clk)begin
		if ((RateDivider) || (!resetn))begin
			count1 <= 24'd0;
			count2 <= 24'd0;
			end
		else begin
			count1 <= count1 + 1'b1;
			count2 <= count2 + 1'b1;
			end
	end
	
	wire xcount, ycount;
	assign xcount = 1'b1;
	assign ycount = 1'b1;
	
	reg [2:0] colour_square;
	
	always@(posedge clk) begin
		if((!resetn)) begin
			colour_square <= 3'b0;
         xreg <= 8'd0;
			yreg <= 7'd0;
			
					
		end
		else if (RateDivider) begin
			colour_square <= colour;
			if ((down) & (right))
			begin
				xreg <= xreg + xcount;
				yreg <= yreg + ycount;
			end
			
			if ((up) & (right))
			begin
				xreg <= xreg + xcount;
				yreg <= yreg - ycount;
			end
			
			if ((up) & (left))
			begin
				xreg <= xreg - xcount;
				yreg <= yreg - ycount;
			end
			
			if ((down) & (left))
			begin
				xreg <= xreg - xcount;
				yreg <= yreg + ycount;
			end
		end
		else if (black_screen)
			colour_square <= 3'b0; 
   end
	
	
	
	draw_square DS0(
	.clk(clk), 
	.resetn(resetn), 
	.x_in(xreg), 
	.y_in(yreg), 
	.colour_in(colour_square),

	.writeEn(writeEn), 
	.x(x), 
	.y(y), 
	.colour_out(colour_out)
	);

endmodule
